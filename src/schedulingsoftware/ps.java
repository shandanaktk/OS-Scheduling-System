/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package schedulingsoftware;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Shano
 */
public class ps extends javax.swing.JFrame {
   private DefaultTableModel tm;  // move this declaration to the class level
    private int processCounter = 1; // move this declaration to the class level
    /**
     * Creates new form ps
     */
    public ps() {
        initComponents();
        this.tm = (DefaultTableModel)ptable.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backbtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ptable = new javax.swing.JTable();
        at = new javax.swing.JTextField();
        bt = new javax.swing.JTextField();
        next = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        wt = new javax.swing.JTextField();
        tt = new javax.swing.JTextField();
        calculate = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        p = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(300, 0));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backbtn.setText("Back");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });
        getContentPane().add(backbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(562, 611, -1, -1));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Enter Details of Processes:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, -1, -1));

        ptable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Process", "Priority", "Arrival Time", "Burst Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ptable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 290, 427, 103));
        getContentPane().add(at, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 230, 70, -1));

        bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btActionPerformed(evt);
            }
        });
        getContentPane().add(bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 230, 70, -1));

        next.setText("Next");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });
        getContentPane().add(next, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 260, -1, -1));

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Arrival Time:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 230, -1, -1));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Burst Time:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 230, -1, -1));

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Average Waiting Time:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 520, -1, -1));

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Average Turnaround Time:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 550, -1, -1));

        wt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wtActionPerformed(evt);
            }
        });
        getContentPane().add(wt, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 520, 118, -1));
        getContentPane().add(tt, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 550, 117, -1));

        calculate.setText("Apply Priority Scheduling");
        calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateActionPerformed(evt);
            }
        });
        getContentPane().add(calculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 480, 427, -1));

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Priority:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 230, -1, -1));

        p.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pActionPerformed(evt);
            }
        });
        getContentPane().add(p, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 230, 80, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Shano\\Documents\\NetBeansProjects\\SchedulingSoftware\\build\\classes\\schedulingsoftware\\icons\\ps.gif")); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        dashboard su = new dashboard();
        su.setVisible(true);
    }//GEN-LAST:event_backbtnActionPerformed

    private void btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
       // TODO add your handling code here:
    String arrivalTime = at.getText();
    String burstTime = bt.getText();
    String priority = p.getText();

    if (arrivalTime.isEmpty() || burstTime.isEmpty() || priority.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter arrival time, burst time, and priority.");
        return;
    }

    try {
        int atVal = Integer.parseInt(arrivalTime);
        int btVal = Integer.parseInt(burstTime);
        int pVal = Integer.parseInt(priority);

        tm.addRow(new Object[] { "Process " + processCounter++, pVal, atVal, btVal });

        at.setText("");
        bt.setText("");
        p.setText("");
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Please enter valid numeric values for arrival time, burst time, and priority.");
    }

    }//GEN-LAST:event_nextActionPerformed

    private void wtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wtActionPerformed

    private void calculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateActionPerformed
int n = tm.getRowCount(); // Number of processes
    if (n == 0) {
        JOptionPane.showMessageDialog(null, "No processes to schedule.");
        return;
    }

    int[] arrivalTime = new int[n];
    int[] burstTime = new int[n];
    int[] priority = new int[n];
    int[] waitingTime = new int[n];
    int[] turnaroundTime = new int[n];
    int[] remainingBurstTime = new int[n];

    for (int i = 0; i < n; i++) {
        try {
            arrivalTime[i] = Integer.parseInt(tm.getValueAt(i, 2).toString());
            burstTime[i] = Integer.parseInt(tm.getValueAt(i, 3).toString());
            priority[i] = Integer.parseInt(tm.getValueAt(i, 1).toString());
            remainingBurstTime[i] = burstTime[i];
        } catch (NumberFormatException | NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Invalid data in table. Please ensure all values are correct.");
            return;
        }
    }

    // Implementing preemptive priority scheduling algorithm
    int currentTime = 0;
    int completedProcesses = 0;
    int totalWaitingTime = 0;
    int totalTurnaroundTime = 0;

    List<Integer> timeline = new ArrayList<>();
    List<Integer> executedProcessIds = new ArrayList<>();

    while (completedProcesses < n) {
        int idx = -1;
        int highestPriority = Integer.MAX_VALUE;

        for (int i = 0; i < n; i++) {
            if (arrivalTime[i] <= currentTime && remainingBurstTime[i] > 0) {
                if (priority[i] < highestPriority || (priority[i] == highestPriority && arrivalTime[i] < arrivalTime[idx])) {
                    highestPriority = priority[i];
                    idx = i;
                }
            }
        }

        if (idx != -1) {
            remainingBurstTime[idx]--;
            timeline.add(currentTime);
            executedProcessIds.add(idx + 1);

            if (remainingBurstTime[idx] == 0) {
                completedProcesses++;
                int finishTime = currentTime + 1;
                waitingTime[idx] = finishTime - burstTime[idx] - arrivalTime[idx];
                turnaroundTime[idx] = finishTime - arrivalTime[idx];

                totalWaitingTime += waitingTime[idx];
                totalTurnaroundTime += turnaroundTime[idx];
            }
        } else {
            timeline.add(currentTime);
            executedProcessIds.add(0);  // Indicate idle time with process ID 0
        }
        currentTime++;
    }

    double avgWaitingTime = (double) totalWaitingTime / n;
    double avgTurnaroundTime = (double) totalTurnaroundTime / n;

    wt.setText(String.format("%.2f", avgWaitingTime));
    tt.setText(String.format("%.2f", avgTurnaroundTime));

    GanttChartps ganttChart = new GanttChartps(timeline, executedProcessIds);
    ganttChart.setVisible(true);
    }//GEN-LAST:event_calculateActionPerformed

    private void pActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ps().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField at;
    private javax.swing.JButton backbtn;
    private javax.swing.JTextField bt;
    private javax.swing.JButton calculate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton next;
    private javax.swing.JTextField p;
    private javax.swing.JTable ptable;
    private javax.swing.JTextField tt;
    private javax.swing.JTextField wt;
    // End of variables declaration//GEN-END:variables
}
